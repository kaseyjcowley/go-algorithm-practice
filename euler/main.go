package main

import (
	"fmt"
	"math"
	"sort"
	"strconv"
	"strings"
)

// A Euler problem is a func with variadic params or return value
type Problem func(...int) int

// Euler struct holding a map of problems by number and the current problem
type Euler struct {
	problems map[int]Problem
	current  int
}

// Add a Euler problem to our map
func (e *Euler) Add(f Problem) {
	e.problems[e.current] = f
	e.current++
}

// Call a Euler function by problem number
func (e *Euler) Call(index int, args ...int) int {
	return e.problems[index](args...)
}

// Create a new Euler struct
func NewEuler() *Euler {
	return &Euler{
		problems: make(map[int]Problem),
		current:  1,
	}
}

// Problem one of project Euler
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
func MultiplesOf3And5(args ...int) int {
	sum := 0
	size := args[0]

	for i := 3; i < size; i++ {
		if i%3 == 0 || i%5 == 0 {
			sum += i
		}
	}

	return sum
}

// Project two of project Euler
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func EvenFibbonacciNumbers(args ...int) int {
	a, b := 1, 1
	accum := 0

	for a+b < args[0] {
		c := a + b

		if c%2 == 0 {
			accum += c
		}

		a, b = b, c
	}

	return accum
}

// Helper function for largest prime factor
func isPrime(number int) bool {
	sqrt := int(math.Sqrt(float64(number)))

	for i := 2; i <= sqrt; i++ {
		if number%i == 0 {
			return false
		}
	}

	return true
}

// Project three of project Euler
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143
func LargestPrimeFactor(args ...int) int {
	number := args[0]
	sqrt := int(math.Sqrt(float64(number)))
	dividend := number

loop1:
	for {
		for i := 2; i < sqrt; i++ {
			// If we have an even division
			if dividend%i == 0 {
				// Divide the number by the current index in the prime loop
				dividend /= i
				if isPrime(dividend) {
					return dividend
				} else {
					continue loop1
				}
			}
		}
	}
}

// Project four of project Euler
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

func isPalindrome(number int) bool {
	str := strings.Split(strconv.Itoa(number), "")
	sort.Reverse(sort.StringSlice(str))
	fmt.Println(str)
	pal, err := strconv.Atoi(strings.Join(str, ""))
	if err != nil {
		fmt.Errorf("Failure to convert string to int with Atoi(s): %q", err)
	}

	return number == pal
}

func LargestPalindromeProduct(args ...int) int {
	product := 0

	for x := 99; x >= 10; x-- {
		for y := 99; y >= 10; y-- {
			product = x * y
			if isPalindrome(product) {
				return product
			}
		}
	}

	return 0
}

func main() {
	e := NewEuler()

	e.Add(MultiplesOf3And5)
	e.Add(EvenFibbonacciNumbers)
	e.Add(LargestPrimeFactor)
	e.Add(LargestPalindromeProduct)

	fmt.Printf("The answer to problem 4 is %d\n", e.Call(4))
}
