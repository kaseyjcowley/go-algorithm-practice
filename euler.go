package main

import (
	"fmt"
	"math"
)

// A Euler problem is a func with no params or return value
type Problem func()

// Euler struct holding a map of problems by number and the current problem
type Euler struct {
	problem map[int]Problem
	current int
}

// Add a Euler problem to our map
func (e *Euler) Add(f Problem) {
	e.problem[e.current] = f
	e.current++
}

// Call a Euler function by problem number
func (e *Euler) Call(index int) {
	e.problem[index]()
}

// Create a new Euler struct
func NewEuler() *Euler {
	return &Euler{
		problem: make(map[int]Problem),
		current: 1,
	}
}

// Problem one of project Euler
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
func multiplesOf3And5() {
	sum := 0
	size := 1000

	for i := 3; i < size; i++ {
		if i%3 == 0 || i%5 == 0 {
			sum += i
		}
	}

	fmt.Printf("The sum of the multiples of 3 and 5 up to %d is %d\n", size, sum)
}

// Project two of project Euler
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func evenFibbonacciNumbers() {
	a, b := 1, 1
	accum := 0

	for a+b < 4000000 {
		c := a + b

		if c%2 == 0 {
			accum += c
		}

		a, b = b, c
	}

	fmt.Printf("The sum of the even fibonnaci numbers up to 4000000 is %d\n", accum)
}

// Project three of project Euler
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143
func largestPrimeFactor() {
	number := 600851475143
	limit := int(math.Sqrt(float64(number)))

	// is number prime helper function
	isPrime := func(number int) bool {
		return number%2 != 0
	}

	// Loop always
	for {
		// Loop through prime numbers
		for i := 2; i < limit; i++ {
			if isPrime(i) {
				dividend := number / i
				if isPrime(dividend) {
					fmt.Printf("Biggest prime factor for %d is %d\n", number, dividend)
					return
				}
			}
		}
	}
}

func main() {
	e := NewEuler()

	e.Add(multiplesOf3And5)
	e.Add(evenFibbonacciNumbers)
	e.Add(largestPrimeFactor)

	e.Call(3)
}
